<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	<mvc:annotation-driven/>
<!-- 		<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> -->
		<aop:aspectj-autoproxy ></aop:aspectj-autoproxy>
<!-- 配置自动扫描type=assignable扫描派生于expression表达式所指定类型的哪些类  Spring实战p80  3.3.2过滤组件扫描 -->
	<context:component-scan base-package="com" >
		<context:include-filter type = "assignable" expression = "com.steven.testSpring.test1.dependencyJar.IApp"></context:include-filter>
		<context:include-filter type = "assignable" expression = "com.steven.testSpring.test1.dependencyJar.aspectJbean.LogAudience"></context:include-filter>
	</context:component-scan>


<!-- 扫描出来的实现Iapp的类app默认bean id为小写类名，此处为其装配默认属性 -->
	<bean id="app" class = "com.steven.testSpring.test1.dependencyJar.impl.App" p:X="xx">
<!-- 	装配类属性 -->
		<property name = "student" ref="Student"></property>
<!-- 	使用SpEL表达式装配类属性 -->
		<property name = "teacher" value="#{Teacher}"></property>
	</bean>
	<bean id="mailService" class = "com.steven.testSpring.test1.dependencyJar.util.mailUtil.MailService"></bean>
	
	<bean id = "Student" class = "com.steven.testSpring.test1.dependencyJar.bean.Student" >
		<property name = "name" value = "cc"></property>
<!-- 	使用SpEL表达式装配属性 -->
		<property name = "num" value = "#{1}"></property>
	</bean>

	<bean id ="Teacher" class = "com.steven.testSpring.test1.dependencyJar.bean.Teacher"
	p:stu-ref="Student" >
		<property name = "name" value = "teachercc"></property>
		<property name = "num" value = "#{1}"></property>
	</bean>
	
<!-- 切面bean	 -->
<!-- 	<bean id = "logAudience" class = "com.steven.testSpring.test1.dependencyJar.aspectJbean.LogAudience"></bean> -->

	<aop:config>
	 <aop:aspect ref="logAudience">
<!-- 	 统一设置pointcut -->
	 	<aop:pointcut id ="testString" expression="execution(* com.steven.testSpring.test1.dependencyJar.impl.App.testString(..))"></aop:pointcut>
	 	<aop:pointcut id ="testReadArg" expression="execution(* com.steven.testSpring.test1.dependencyJar.impl.App.setAtt(String)) and args(thoughts)"></aop:pointcut>
<!-- 	 定义aop前置通知 -->
	 	<aop:before pointcut=
	 	"execution(* com.steven.testSpring.test1.dependencyJar.impl.App.testString(..))"
	 	method = "runBeforeMethod"/>
<!-- 	 定义aop后置通知 -->
	 	<aop:after pointcut=
	 	"execution(* com.steven.testSpring.test1.dependencyJar.impl.App.testString(..))"
	 	method = "runAfterMethod"/>
<!-- 	 定义aop抛异常通知 -->
	 	<aop:after-throwing pointcut-ref="testString"
	 	method = "runAfterThrow"/>
	 	<aop:around pointcut=
	 	"execution(* com.steven.testSpring.test1.dependencyJar.impl.App.testString(..))"
	 	method="aroundNotification"/>
<!-- 	 	定义aop读取参数 -->
	 	<aop:before pointcut-ref="testReadArg" method="readAtt" arg-names="thoughts"/>
	 </aop:aspect>
	</aop:config>
	

	
<!-- 导入其他spring配置文件 -->
	<!--<import resource="classpath:spring/application-*-context.xml" />-->
	<import resource="classpath:spring/application-schedule.xml"/>
</beans>
